<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rabarar\'s Blog]]></title>
  <link href="http://rabarar.github.io/atom.xml" rel="self"/>
  <link href="http://rabarar.github.io/"/>
  <updated>2015-09-22T14:37:20-04:00</updated>
  <id>http://rabarar.github.io/</id>
  <author>
    <name><![CDATA[Rob Baruch]]></name>
    <email><![CDATA[rabarar@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jetson TK-1 Nvidia L4T Linux Platform]]></title>
    <link href="http://rabarar.github.io/blog/2015/09/22/jetson-tk-1-nvidia-l4t-linux-platform/"/>
    <updated>2015-09-22T13:44:06-04:00</updated>
    <id>http://rabarar.github.io/blog/2015/09/22/jetson-tk-1-nvidia-l4t-linux-platform</id>
    <content type="html"><![CDATA[<h2>Jetson TK-1 - Embedded SBC SuperComputer Power for Pennies</h2>

<p><img src="http://jetsonhacks.com/wp-content/uploads/2014/06/DevBoard2-300x199.png" title="Jetson TK-1" alt="jetsonhacks" /></p>

<p>Okay, so everyone has a blast playing with the &lt; $50 raspberry pi, but what if you take it up a notch. I mean drop a few extra bucks (more like $160 extra) and you can have some serious power in a small little footprint. The Jetson TK-1 is a Kepler GPU with <strong>192 cuda cores</strong> and <strong>4-Plus-1 quad-core ARM Cortex A15 CPU</strong>. That&rsquo;s a lotta power for $192 (retail). But wait, there&rsquo;s more. It comes with 1Ge ethernet connector, 2Gb ram, 16Gb eMMC memory, USB, Audio, SATA, HDMI, and RS-232 serial port (old school).</p>

<p>The board supports a derivative of ubuntu 14.04 called <a href="https://developer.nvidia.com/embedded/linux-tegra">L4T</a>. Additionally, there is support for Cuda 6.5, OpenCV, and OpenGL, as well as samples - <a href="https://developer.nvidia.com/gameworks-opengl-samples">NVIDIA GameWorks OpenGL Samples 2.11</a>. Definitely checkout the floating <a href="http://docs.nvidia.com/gameworks/index.html#gameworkslibrary/graphicssamples/opengl_samples/hdrsample.htm">Teapot!</a>.</p>

<p>Aside from all the graphic power offered by this platform. You can use it as a streaming server too. Real-time mp3 streaming is easy as pi! Er, easy as <strong>Jetson</strong>!!</p>

<h2>Darkice &amp; Icecast2</h2>

<p>I thought I&rsquo;d see how easy it was to setup Darkice and stream live audio from the mic on the Tegra to my Icecast2 server.</p>

<p>To build the source we first need to install all the dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get --no-install-recommends install build-essential devscripts autotools-dev fakeroot dpkg-dev debhelper autotools-dev dh-make quilt ccache libsamplerate0-dev libpulse-dev libaudio-dev lame libjack-jackd2-dev libasound2-dev libtwolame-dev libfaad-dev libflac-dev libmp4v2-dev libshout3-dev libmp3lame-dev</span></code></pre></td></tr></table></div></figure>


<p>It took less than a 5 minutes to get it set up! Download the Darkice source and build (configure) it with the <code>--with-alsa and --with-alsa-prefix</code>, and <code>--with-lame, and --with-lame-prefix</code>, both pointing to the library directory for the shared libraries respectivly. After configuring and Making the darkice binary, you&rsquo;ll need to setup a <code>/etc/darkice.cfg</code> file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># see the darkice.cfg man page for details
</span><span class='line'>
</span><span class='line'># this section describes general aspects of the live streaming session
</span><span class='line'>[general]
</span><span class='line'>duration      = 0                # duration of encoding, in seconds. 0 means forever
</span><span class='line'>bufferSecs    = 5                # size of internal slip buffer, in seconds
</span><span class='line'>reconnect     = yes              # reconnect to the server(s) if disconnected
</span><span class='line'>
</span><span class='line'># this section describes the audio input that will be streamed
</span><span class='line'>[input]
</span><span class='line'>device        = hw:1,0           # Alsa soundcard device for the audio input
</span><span class='line'>sampleRate    = 44100            # sample rate in Hz. try 11025, 22050 or 44100
</span><span class='line'>bitsPerSample = 16               # bits per sample. try 16
</span><span class='line'>channel       = 1                # channels. 1 = mono, 2 = stereo
</span><span class='line'>
</span><span class='line'># this section describes a streaming connection to an IceCast2 server
</span><span class='line'># there may be up to 8 of these sections, named [icecast2-0] ... [icecast2-7]
</span><span class='line'># these can be mixed with [icecast-x] and [shoutcast-x] sections
</span><span class='line'>[icecast2-0]
</span><span class='line'>bitrateMode   = vbr              # variable bit rate
</span><span class='line'>format        = mp3              # format of the stream: mp3
</span><span class='line'>quality       = 0.6              # quality of the stream sent to the server
</span><span class='line'>server        = localhost        # host name of the server
</span><span class='line'>port          = 8000             # port of the IceCast2 server, usually 8000
</span><span class='line'>password      = SOURCE_PASSWORD  # source password to the IceCast2 server
</span><span class='line'>mountPoint    = raspi         # mount point of this stream on the IceCast2 server
</span><span class='line'>name          = RasPi            # name of the stream
</span><span class='line'>description   = DarkIce on RasPi # description of the stream
</span><span class='line'>url           = http://localhost # URL related to the stream
</span><span class='line'>genre         = my genre         # genre of the stream
</span><span class='line'>public        = no               # advertise this stream?
</span><span class='line'>localDumpFile = recording.mp3    # Record also to a file</span></code></pre></td></tr></table></div></figure>


<p> I set the device name to <code>pulse</code>. Fire it up and throw it in the background and you should see a stream registered on your Icecast2 server!</p>

<p> You may need to setup your audio port on the Jetson.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>amixer cset name="Stereo ADC MIXL ADC2 Switch" 0
</span><span class='line'>amixer cset name="Stereo ADC MIXR ADC2 Switch" 0
</span><span class='line'>amixer cset name="Int Mic Switch" 0
</span><span class='line'>amixer cset name="ADC Capture Switch" 1
</span><span class='line'>amixer cset name="RECMIXL BST1 Switch" 0
</span><span class='line'>amixer cset name="RECMIXR BST1 Switch" 0
</span><span class='line'>amixer cset name="RECMIXL BST2 Switch" 1
</span><span class='line'>amixer cset name="RECMIXR BST2 Switch" 1
</span><span class='line'>amixer cset name="Stereo ADC L1 Mux" "ADC"
</span><span class='line'>amixer cset name="Stereo ADC R1 Mux" "ADC"
</span><span class='line'>amixer cset name="Stereo ADC MIXL ADC1 Switch" 1
</span><span class='line'>amixer cset name="Stereo ADC MIXR ADC1 Switch" 1
</span><span class='line'>amixer cset name="Stereo ADC MIXL ADC2 Switch" 0
</span><span class='line'>amixer cset name="Stereo ADC MIXR ADC2 Switch" 0
</span><span class='line'>amixer cset name="IN1 Mode Control" "Single ended"
</span><span class='line'>amixer cset name="IN2 Mode Control" "Single ended"
</span><span class='line'>amixer cset name="Mic Jack Switch" 1</span></code></pre></td></tr></table></div></figure>


<p>and then save the settings using:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alsactl store</span></code></pre></td></tr></table></div></figure>


<p> It&rsquo;s that easy!</p>

<p> Helpful links:</p>

<ul>
<li><a href="http://elinux.org/Jetson_TK1">eLinux Tegra</a></li>
<li><a href="http://jetsonhacks.com">Jetson Hacks!</a></li>
<li><a href="https://developer.nvidia.com/jetson-tk1">nVidia Developer for Jetson</a></li>
<li><a href="http://arrayfire.com/download/">Tegra K1 ArrayFire</a></li>
</ul>


<p> #### Next Up: Jetson TK-1 20-node cluster
 So, I was impulsive&hellip; I bought 20 of these boards, loaded up the <a href="https://docs.nvidia.com/jetpack-tk1/index.html">JetPack</a> and started to ponder - how I am going to power, connect, and house 20 of these boards.</p>

<p> Aside from stacking up the hardware, I&rsquo;m thinking about the software to glue twenty of these things together too. Want to take advantage of cuda and maybe even mpi&hellip; stay tuned!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang on Golang]]></title>
    <link href="http://rabarar.github.io/blog/2015/08/17/golang-on-golang/"/>
    <updated>2015-08-17T10:41:00-04:00</updated>
    <id>http://rabarar.github.io/blog/2015/08/17/golang-on-golang</id>
    <content type="html"><![CDATA[<h3>Golang packages &ldquo;go/parser&rdquo; and &ldquo;go/ast&rdquo;</h3>

<h5>Golang Parsing Golang:</h5>

<p>Included as part of the built-in golang packages are libraries that provide for programatic parsing and inspecting of golang source code.</p>

<p>The two key packages are <code>go/parser</code> and <code>go/ast</code></p>

<p>Let&rsquo;s take a look Parsing process. To start, we must create an Abstract Syntax Tree (AST). Next, we can Parse a source file (or string), which upon success returns a pointer to and AST, <code>*ast.File</code>. All the meat is inside the <code>ast.File</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// Create the AST by parsing src.</span>
</span><span class='line'><span class="nx">fset</span> <span class="o">:=</span> <span class="nx">token</span><span class="p">.</span><span class="nx">NewFileSet</span><span class="p">()</span> <span class="c1">// positions are relative to fset</span>
</span><span class='line'><span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">ParseFile</span><span class="p">(</span><span class="nx">fset</span><span class="p">,</span> <span class="s">&quot;src.go&quot;</span><span class="p">,</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">parser</span><span class="p">.</span><span class="nx">ParseComments</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can look at different aspects within the parse. For example, if we want to see what imports are included in the source file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// Print the imports from the file&#39;s AST.</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">s</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Imports</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lots of opportunities to parse through and look for declarations, functions, specific language mechanisms, expressions, etc. The opportunities are virtually limitless!</p>

<p>There&rsquo;s a ton of reflection at play in this package. You&rsquo;ll need to inspect and assert to look at the specific elements within a structure. A close read of the AST Print is a worthwhile exercise :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang Scribbles]]></title>
    <link href="http://rabarar.github.io/blog/2015/07/07/golang-scribbles/"/>
    <updated>2015-07-07T11:05:41-04:00</updated>
    <id>http://rabarar.github.io/blog/2015/07/07/golang-scribbles</id>
    <content type="html"><![CDATA[<p>So I was <a href="http://bored.com"><strong>bored</strong></a> an thought I&rsquo;d write some go code to demonstrate a few interesting features in Go!</p>

<p>Take a look at</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>        <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>        <span class="s">&quot;sync&quot;</span>
</span><span class='line'>        <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>        <span class="nx">MAXFUNCS</span> <span class="p">=</span> <span class="mi">100</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">x</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span><span class='line'>                <span class="nx">y</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span>
</span><span class='line'>                <span class="nx">z</span> <span class="kt">int</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">xx</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span><span class='line'>                <span class="nx">y</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span>
</span><span class='line'>                <span class="nx">z</span> <span class="kt">int</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">MAXFUNCS</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">x</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>                        <span class="nx">x</span><span class="p">.</span><span class="nx">y</span> <span class="p">=</span> <span class="nx">z</span>
</span><span class='line'>                        <span class="nx">x</span><span class="p">.</span><span class="nx">z</span> <span class="p">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">y</span><span class="p">(</span><span class="mi">42</span> <span class="o">*</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'>                        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;x.z = %d\n&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span>
</span><span class='line'>                        <span class="nx">xx</span> <span class="o">&lt;-</span> <span class="nx">x</span>
</span><span class='line'>                        <span class="nx">x</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">to</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="nx">gets</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="nx">num</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">xx</span><span class="p">:</span>
</span><span class='line'>                        <span class="nx">to</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>                        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;got %d\n&quot;</span><span class="p">,</span> <span class="nx">num</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span>
</span><span class='line'>                        <span class="nx">gets</span><span class="o">++</span>
</span><span class='line'>                <span class="k">default</span><span class="p">:</span>
</span><span class='line'>                        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;sleeping...\n&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>                        <span class="nx">to</span><span class="o">++</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="nx">to</span> <span class="p">&gt;</span> <span class="mi">5</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">break</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;received %d gets before timeout\n&quot;</span><span class="p">,</span> <span class="nx">gets</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">z</span><span class="p">(</span><span class="nx">w</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I want to highlight a few cool concepts in Go:</p>

<ul>
<li>Anonymous structures</li>
<li>Bi-directional Channels</li>
<li>Go Routines</li>
<li>Non-blocking Channels</li>
<li>Anonymous fields in structures</li>
<li>Closures</li>
</ul>


<p>This toy program defines a variable <em>x</em> that is an anonymous struct that has an anonymous field that is a <code>sync.Mutux</code>. Why make this field anonymous? Well, by doing so, we can <code>Lock()</code> and <code>Unlock()</code> the structure without needlessly specifying a fieldname. Simply <code>x.Lock()</code> will lock the Mutux.</p>

<p>Next we create a channel of type that&rsquo;s equivalent to the unnamed stucture type. We do this by mirroring the definition of the unnamed structure in the variable definition.</p>

<p>Now that we&rsquo;ve defined our variables, we create a bunch of go routines using a function closure. We define a function that takes an <code>int</code> as our closure. We then <code>Lock()</code> our variable, assign a function to memeber <code>x.y</code> and call the function passing in the integer and returning the result to <code>x.z</code>. Now that we&rsquo;ve assigned values to <code>x</code> we pass it down the channel <code>xx</code>. Lastly we <code>Unlock()</code> the Mutux.</p>

<p>At this point we&rsquo;ve fired up a bunch of go routines, and sent copies of our anonymous struct down the channel.</p>

<p>Next we start and infinite loop (yikes!) and check our channel for results in our main go-routine.</p>

<p>The first <code>case</code> in the <code>select</code> checks to see if we&rsquo;ve received a message on the channel. If we have we print out the value that we assigned to our integer field in our anonymous structure and tally the reeipt of a message on the channel.</p>

<p>If we don&rsquo;t receive a message, we default to our <code>default</code> case where we manage a timeout counter, <code>to</code>, After 5 consecutive seconds of not receiving any messages, we break our infinite loop, and report a timeout and display how many messages we received prior to timing out.</p>

<p>What might make this example more interesting is to delay each go routine by a random amount of time and see if our reception of messages completes prior to receiving all of the messages.</p>

<p>Try modifying the function z as follows and see what happens</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">z</span><span class="p">(</span><span class="nx">w</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">(</span><span class="nx">rand</span><span class="p">.</span><span class="nx">Intn</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">w</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This more realistically demonstrates how the Non-blocking channel works when reading mesages at an unpredictable rate.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DarkIce and IceCast]]></title>
    <link href="http://rabarar.github.io/blog/2015/07/02/darkice-and-icecast/"/>
    <updated>2015-07-02T17:49:49-04:00</updated>
    <id>http://rabarar.github.io/blog/2015/07/02/darkice-and-icecast</id>
    <content type="html"><![CDATA[<p><strong>So</strong> you want to <em>livestream audio</em> from your Pi to the web? Take a look at these two packages: Darkice, and IceCast. Darkice lets you select a sound input to encode and stream to an IceCast server. The server will wrap the audio stream with a nice web-appropriate display to make selecting and playing content easily.</p>

<hr />

<h2>DarkIce: Audio Encoding software</h2>

<p>First, take a look at this <a href="https://stmllr.net/blog/live-mp3-streaming-from-audio-in-with-darkice-and-icecast2-on-raspberry-pi/">link</a> describing how to compile DarkIce with mp3 support which is likely what you&rsquo;re going to want.</p>

<p>Here&rsquo;s the config file to setup DarkIce on</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># see the darkice.cfg man page for details
</span><span class='line'>
</span><span class='line'># this section describes general aspects of the live streaming session
</span><span class='line'>[general]
</span><span class='line'>duration      = 0                # duration of encoding, in seconds. 0 means forever
</span><span class='line'>bufferSecs    = 5                # size of internal slip buffer, in seconds
</span><span class='line'>reconnect     = yes              # reconnect to the server(s) if disconnected
</span><span class='line'>
</span><span class='line'># this section describes the audio input that will be streamed
</span><span class='line'>[input]
</span><span class='line'>device        = hw:1,0           # Alsa soundcard device for the audio input
</span><span class='line'>sampleRate    = 44100            # sample rate in Hz. try 11025, 22050 or 44100
</span><span class='line'>bitsPerSample = 16               # bits per sample. try 16
</span><span class='line'>channel       = 1                # channels. 1 = mono, 2 = stereo
</span><span class='line'>
</span><span class='line'># this section describes a streaming connection to an IceCast2 server
</span><span class='line'># there may be up to 8 of these sections, named [icecast2-0] ... [icecast2-7]
</span><span class='line'># these can be mixed with [icecast-x] and [shoutcast-x] sections
</span><span class='line'>[icecast2-0]
</span><span class='line'>bitrateMode   = vbr              # variable bit rate
</span><span class='line'>format        = mp3              # format of the stream: mp3
</span><span class='line'>quality       = 0.6              # quality of the stream sent to the server
</span><span class='line'>server        = localhost        # host name of the server
</span><span class='line'>port          = 8000             # port of the IceCast2 server, usually 8000
</span><span class='line'>password      = SOURCE_PASSWORD  # source password to the IceCast2 server
</span><span class='line'>mountPoint    = raspi         # mount point of this stream on the IceCast2 server
</span><span class='line'>name          = RasPi            # name of the stream
</span><span class='line'>description   = DarkIce on RasPi # description of the stream
</span><span class='line'>url           = http://localhost # URL related to the stream
</span><span class='line'>genre         = my genre         # genre of the stream
</span><span class='line'>public        = no               # advertise this stream?
</span><span class='line'>localDumpFile = recording.mp3    # Record also to a file</span></code></pre></td></tr></table></div></figure>


<p>The key element here is the [input] section. Here we specify the Alsa device from which to source audio for capturing and encoding.</p>

<p>The other element in the config file that you need to configure is the [icecast-2]. Set the address (server and port) as well as the password to the icecast-2 server. Note that the default configuration for the icecast-2 server is only two (2) streams. Be sure to increase that if you&rsquo;re attempting to stream more than that to the server.</p>

<p>If you want to encode more than one stream on your Pi, you can run multiple instances of DarkIce and use the <strong>-c</strong> flag to specify a unique configuration file for each instance.</p>

<p>To configure <a href="http://www.icecast.org">Icecast</a>, start here. The <a href="http://www.icecast.org/docs/">Docs</a> are also a good starting point too. For the impatient you can just use apt-get.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install icecast</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VexTab! Musical Notiation in HTML]]></title>
    <link href="http://rabarar.github.io/blog/2015/04/15/vextab-awesomness-for-musical-notiation/"/>
    <updated>2015-04-15T15:07:08-04:00</updated>
    <id>http://rabarar.github.io/blog/2015/04/15/vextab-awesomness-for-musical-notiation</id>
    <content type="html"><![CDATA[<h2>Using JavaScript to Write Music!</h2>

<h3><a href="http://www.vexflow.com/vextab/">VexFlow, VexTab</a> - Musical Engraving in Javascript</h3>

<p>I&rsquo;m very excited!! I randomly found a great piece of software developed by <strong>Mohit Muthanna Cheppudira</strong> that generates Musical notation and Guitar Tab.</p>

<p>Download the <a href="http://github.com/0xfe/vextab">javascript</a> or use the <a href="https://chrome.google.com/webstore/detail/npcffdibegeppkebphaghnpkcjcpopjf">Chrome Extension</a> and you can quickly encode musical notation like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tabstave
</span><span class='line'>  notation=true
</span><span class='line'>  key=A time=4/4
</span><span class='line'>
</span><span class='line'>  notes :q =|: (5/2.5/3.7/4) :8 7-5h6/3 ^3^ 5h6-7/5 ^3^ :q 7V/4 |
</span><span class='line'>  notes :8 t12p7/4 s5s3/4 :8 3s:16:5-7/5 :h p5/4
</span><span class='line'>  text :w, |#segno, ,|, :hd, , #tr
</span></code></pre></td></tr></table></div></figure>


<p>And get beautifully formatted musical notation like this:</p>

<p><img src="http://rabarar.github.io/images/staff.png" alt="fig A" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Doodling With Go]]></title>
    <link href="http://rabarar.github.io/blog/2015/03/01/code-doodling-with-go/"/>
    <updated>2015-03-01T13:11:00-05:00</updated>
    <id>http://rabarar.github.io/blog/2015/03/01/code-doodling-with-go</id>
    <content type="html"><![CDATA[<p>Today, the weather was less than attractive so I thought I&rsquo;d play around with Go routines, channels, and functions.</p>

<p>Take a look at the following code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">fTyp</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Doer</span>   <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">error</span>
</span><span class='line'>        <span class="nx">Seeker</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span>
</span><span class='line'>        <span class="nx">Wander</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span>
</span><span class='line'>        <span class="nx">With</span>   <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">do</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">fTyp</span><span class="p">)</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">o</span> <span class="nx">fTyp</span> <span class="p">=</span> <span class="nx">fTyp</span><span class="p">{</span><span class="nx">Doer</span><span class="p">:</span> <span class="nx">foo</span><span class="p">,</span> <span class="nx">Seeker</span><span class="p">:</span> <span class="nx">bar</span><span class="p">,</span> <span class="nx">Wander</span><span class="p">:</span> <span class="nx">wander</span><span class="p">,</span> <span class="nx">With</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">f</span> <span class="nx">fTyp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">do</span> <span class="o">&lt;-</span> <span class="nx">f</span>
</span><span class='line'>        <span class="p">}(</span><span class="nx">o</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">stuff</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">do</span>
</span><span class='line'>        <span class="nx">stuff</span><span class="p">.</span><span class="nx">Doer</span><span class="p">(</span><span class="nx">stuff</span><span class="p">.</span><span class="nx">With</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">stuff</span><span class="p">.</span><span class="nx">Seeker</span><span class="p">(</span><span class="nx">stuff</span><span class="p">.</span><span class="nx">With</span><span class="p">,</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">Doer</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">stuff</span><span class="p">.</span><span class="nx">Wander</span><span class="p">(</span><span class="nx">stuff</span><span class="p">.</span><span class="nx">With</span><span class="p">,</span> <span class="nx">stuff</span><span class="p">.</span><span class="nx">Seeker</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">id</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;foo: %d\n&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">bar</span><span class="p">(</span><span class="nx">id</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">f</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">f</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">wander</span><span class="p">(</span><span class="nx">id</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">f</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">f</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">foo</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Who&rsquo;s ready to go (no pun intended) a step further and create an additional member to the <strong>fTyp struct</strong> and corresponding functions that will extend the meta-abstraction passing <strong>stuff.Wander</strong> as a parameter?</p>

<p>The things we do in the name of entertainment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goofing Around With Atom]]></title>
    <link href="http://rabarar.github.io/blog/2015/02/22/goofing-around-with-atom/"/>
    <updated>2015-02-22T17:41:00-05:00</updated>
    <id>http://rabarar.github.io/blog/2015/02/22/goofing-around-with-atom</id>
    <content type="html"><![CDATA[<p>Today, I installed Atom! It&rsquo;s nice&hellip; and certainly better than blogging using <strong>vi</strong> but I have to say the documentation isn&rsquo;t the greatest!</p>

<p>I&rsquo;ll hack around at it and see if I can make it a permanent part of my blogging toolbag</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoRoutines, Channels, and Proper Exits]]></title>
    <link href="http://rabarar.github.io/blog/2015/02/17/goroutines-channels/"/>
    <updated>2015-02-17T15:12:13-05:00</updated>
    <id>http://rabarar.github.io/blog/2015/02/17/goroutines-channels</id>
    <content type="html"><![CDATA[<p>I read a great article summarizing the interrelationship between go routines, channel communications, unix signals and proper termination by <a href="http://adampresley.com/2015/02/16/waiting-for-goroutines-to-finish-running-before-exiting.html">Adam Presley</a>. In his article he describes how to coordinate starting a go routine, handling an interrupt, and then communicating through a channel to the go routine that the program wants to terminate.</p>

<p>So what do you do if you have more than one go routine? You need to communicate to all and wait for all when you quit. Here&rsquo;s a contrived example that demonstrates one way to do it.</p>

<p>One point to note. In this example we don&rsquo;t distinguish between which routines we wish to quit in any particular order. In fact, as implemented here, there is no deterministic way of knowing the order (How might you implement the code so that you would be able to deterministically know the order of go routine termination?)</p>

<p>Here&rsquo;s an example that demonstrates how you might handle an arbitrary number of go routines:</p>

<p>Let&rsquo;s say we start off with a constant number of routines we wish to create:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>        <span class="nx">maxGoRoutines</span> <span class="p">=</span> <span class="mi">50</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will start a go routine  maxGoRoutines times and then we will ensure that we wait for the same number of routines to complete by using a waitGroup</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">waitGroup</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span><span class='line'><span class="nx">waitGroup</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="nx">maxGoRoutines</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s define a simple go routine. We&rsquo;ll pass a channel to let us know when to quit, a waitGroup to indicate that we&rsquo;ve quit once we&rsquo;ve left the routine, and an identifier to distinguish between go routines to make our demo look cool!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">shutdownChannel</span> <span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">waitGroup</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">,</span> <span class="nx">id</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Starting work goroutine...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">waitGroup</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/*</span>
</span><span class='line'><span class="cm">      * Listen on channels for message.</span>
</span><span class='line'><span class="cm">      */</span>
</span><span class='line'>      <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nx">_</span> <span class="p">=</span> <span class="o">&lt;-</span><span class="nx">shutdownChannel</span><span class="p">:</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Received shutdown on goroutine %d\n&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span><span class='line'>          <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">default</span><span class="p">:</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Do some hard work here!</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}(</span><span class="nx">shutdownChannel</span><span class="p">,</span> <span class="nx">waitGroup</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we&rsquo;ve launed the routines, we&rsquo;ll wait for the program to terminate. We&rsquo;ve established a signal handler to let us know when SIGTERM or SIGQUIT by the following lines:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">quitChannel</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'><span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">quitChannel</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we&rsquo;ll wait to receive a signal that we&rsquo;ve quit by blocking on the quitChannel. Once we receive a message indicating that we&rsquo;ve quit, we&rsquo;ll send a boolean true to our go routine shutdownChannel.  Notice that we have to send as many messages to this channel as we have go routines. Otherwise, we&rsquo;ll leave go routines hanging around and that will block us from terminating.</p>

<p>And finally, we wait for the waitGroup to complete. After each go routine calls its defered waitGroup.Done() function, we will unblock on the waitGroup.Wait() and can successfully exit!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>        <span class="nx">waitGroup</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Done.&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the whole thing from soup to nuts!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>        <span class="s">&quot;log&quot;</span>
</span><span class='line'>        <span class="s">&quot;os&quot;</span>
</span><span class='line'>        <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>        <span class="s">&quot;runtime&quot;</span>
</span><span class='line'>        <span class="s">&quot;sync&quot;</span>
</span><span class='line'>        <span class="s">&quot;syscall&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>        <span class="nx">maxGoRoutines</span> <span class="p">=</span> <span class="mi">50</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOMAXPROCS</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">NumCPU</span><span class="p">())</span> <span class="o">*</span> <span class="mf">1.25</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Starting application...&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * When SIGINT or SIGTERM is caught write to the quitChannel</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="nx">quitChannel</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">quitChannel</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">shutdownChannel</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">waitGroup</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">waitGroup</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="nx">maxGoRoutines</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Create a goroutine that does imaginary work</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">maxGoRoutines</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">shutdownChannel</span> <span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">waitGroup</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">,</span> <span class="nx">id</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Starting work goroutine...&quot;</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">defer</span> <span class="nx">waitGroup</span><span class="p">.</span><span class="nx">Done</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>                                <span class="cm">/*</span>
</span><span class='line'><span class="cm">                                 * Listen on channels for message.</span>
</span><span class='line'><span class="cm">                                 */</span>
</span><span class='line'>                                <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>                                <span class="k">case</span> <span class="nx">_</span> <span class="p">=</span> <span class="o">&lt;-</span><span class="nx">shutdownChannel</span><span class="p">:</span>
</span><span class='line'>                                        <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Received shutdown on goroutine %d\n&quot;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span><span class='line'>                                        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>                                <span class="k">default</span><span class="p">:</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                                <span class="c1">// Do some hard work here!</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                <span class="p">}(</span><span class="nx">shutdownChannel</span><span class="p">,</span> <span class="nx">waitGroup</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Wait until we get the quit message</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="o">&lt;-</span><span class="nx">quitChannel</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Received quit. Sending shutdown and waiting on goroutines...&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">maxGoRoutines</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">shutdownChannel</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">         * Block until wait group counter gets to zero</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="nx">waitGroup</span><span class="p">.</span><span class="nx">Wait</span><span class="p">()</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Done.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spying on Files With Fsnotify]]></title>
    <link href="http://rabarar.github.io/blog/2015/02/09/spying-on-files-with-fsnotify/"/>
    <updated>2015-02-09T15:06:49-05:00</updated>
    <id>http://rabarar.github.io/blog/2015/02/09/spying-on-files-with-fsnotify</id>
    <content type="html"><![CDATA[<p>Sometimes you want to automate a workflow process by watching a filesystem directory and treating it like a work queue. As files arrive in the directory, a process watching the directory can be notified of new work items and kick off a process to perform the desired task.</p>

<p>A golang package called <a href="http://godoc.org/gopkg.in/fsnotify.v1">fsnotify</a> does most of the nitty-gritty to make the details of implementing a queue manager somewhat trivial. Below is an example of how you would set up a queue to watch a directory using the package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>   <span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>      <span class="s">&quot;log&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="s">&quot;github.com/go-fsnotify/fsnotify&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">watcher</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fsnotify</span><span class="p">.</span><span class="nx">NewWatcher</span><span class="p">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">defer</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
</span><span class='line'>      <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">case</span> <span class="nx">event</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">watcher</span><span class="p">.</span><span class="nx">Events</span><span class="p">:</span>
</span><span class='line'>                  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;event:&quot;</span><span class="p">,</span> <span class="nx">event</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">if</span> <span class="nx">event</span><span class="p">.</span><span class="nx">Op</span><span class="o">&amp;</span><span class="nx">fsnotify</span><span class="p">.</span><span class="nx">Write</span> <span class="o">==</span> <span class="nx">fsnotify</span><span class="p">.</span><span class="nx">Write</span> <span class="p">{</span>
</span><span class='line'>                      <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;modified file:&quot;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="k">case</span> <span class="nx">err</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">watcher</span><span class="p">.</span><span class="nx">Errors</span><span class="p">:</span>
</span><span class='line'>                  <span class="nx">log</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;error:&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}()</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">err</span> <span class="p">=</span> <span class="nx">watcher</span><span class="p">.</span><span class="nx">Add</span><span class="p">(</span><span class="s">&quot;/tmp/foo&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;-</span><span class="nx">done</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the main of the golang program, we create a new watcher and start a go-routine that selects events from the watcher Events channel. Each event is logged and then if an event of type &lsquo;fsnotiy.Write&rsquo; is received by the watcher, an additional log message is printed. Outside of the go-routine, we add the /tmp/foo directory to the watcher and wait on the done channel (which will block indefinitely).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Color My World! Or at Least My Logfiles]]></title>
    <link href="http://rabarar.github.io/blog/2015/02/07/color-my-world-or-at-least-my-logfiles/"/>
    <updated>2015-02-07T12:07:51-05:00</updated>
    <id>http://rabarar.github.io/blog/2015/02/07/color-my-world-or-at-least-my-logfiles</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a fun little <a href="https://github.com/aybabtme/rgbterm">git</a> I came across from Antoine Grondin. It&rsquo;s a cute little logfile color package to make your logfiles really pop!</p>

<p>Tired of those old boring foreground on background logs? Well, try this!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>   <span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>      <span class="s">&quot;log&quot;</span>
</span><span class='line'>      <span class="s">&quot;os&quot;</span>
</span><span class='line'>      <span class="s">&quot;time&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="s">&quot;github.com/aybabtme/rgbterm/rainbow&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">joyfulOutput</span> <span class="o">:=</span> <span class="nx">rainbow</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="mi">252</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">43</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">SetOutput</span><span class="p">(</span><span class="nx">joyfulOutput</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">500</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;This is surely going to drive you nuts!\n&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">250</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay, that&rsquo;s sure to get you screamed at if you actually used it. But a more useful package used by the <b>rainbow</b> package is the <b>rgbterm</b> package. This package lets you color any text and display it on stdout.</p>

<p>Here&rsquo;s an example using this package:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>   <span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>      <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="s">&quot;github.com/aybabtme/rgbterm&quot;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">g</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">uint8</span>
</span><span class='line'>      <span class="c1">// pick a color</span>
</span><span class='line'>      <span class="nx">r</span><span class="p">,</span> <span class="nx">g</span><span class="p">,</span> <span class="nx">b</span> <span class="p">=</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span>
</span><span class='line'>      <span class="c1">// choose a word</span>
</span><span class='line'>      <span class="nx">word</span> <span class="o">:=</span> <span class="s">&quot;=)&quot;</span>
</span><span class='line'>      <span class="c1">// colorize it!</span>
</span><span class='line'>      <span class="nx">coloredWord</span> <span class="o">:=</span> <span class="nx">rgbterm</span><span class="p">.</span><span class="nx">String</span><span class="p">(</span><span class="nx">word</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">g</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">r</span><span class="p">^</span><span class="nx">r</span><span class="p">,</span> <span class="nx">g</span><span class="p">^</span><span class="nx">g</span><span class="p">,</span> <span class="nx">b</span><span class="p">^</span><span class="nx">b</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Oh!&quot;</span><span class="p">,</span> <span class="nx">coloredWord</span><span class="p">,</span> <span class="s">&quot;hello!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wake Me Up Before You Logo!]]></title>
    <link href="http://rabarar.github.io/blog/2015/01/18/wake-me-up-before-you-logo/"/>
    <updated>2015-01-18T11:54:38-05:00</updated>
    <id>http://rabarar.github.io/blog/2015/01/18/wake-me-up-before-you-logo</id>
    <content type="html"><![CDATA[<p>Just for fun, I thought I&rsquo;d play around with <a href="http://www.alancsmith.co.uk/logo/">Alan Smith&rsquo;s ACSLogo</a> for Mac. This great program is a full-featured Logo interpreter that is perfectly suited for teaching basic programming and math concepts to people of all ages.</p>

<p>I&rsquo;ve put together a <a href="https://github.com/rabarar/LogoPlay">repo</a> on github that is a collection of fun and interesting procedures mostly do perform graphically interesting recusive problems. Feel free to add to the collection!</p>

<p>I strongly suggest start by reading the <a href="http://www.alancsmith.co.uk/logo/LogoUserGuide151.pdf">User Guide</a> and the <a href="http://www.alancsmith.co.uk/logo/Logocommandref151.pdf">Command Reference</a> documents to orient yourself to the Logo dialect.</p>

<p>Have Fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB and Go!]]></title>
    <link href="http://rabarar.github.io/blog/2015/01/03/mongodb-and-go/"/>
    <updated>2015-01-03T15:15:24-05:00</updated>
    <id>http://rabarar.github.io/blog/2015/01/03/mongodb-and-go</id>
    <content type="html"><![CDATA[<p>MongoDB and Go, a pair meant to be together!</p>

<p>I&rsquo;ve recently been working on a start-up that&rsquo;s afforded me the need to get better acquainted with Mongodb and Go. Quickly working with these two technologies, one feels that they were meant for each other. Throw in the json package and you&rsquo;re cooking with Gasoline!</p>

<p>The fun begins when you go wild with the use of map[string]interface{} and []map[string]interface{}. At first glance to the noob, these are daunting looking type definitions. But with a little experimenting to get you legs underneath you, you&rsquo;ll find that you coudn&rsquo;t live without these guys! And for good measure, their big brother, interface{}, is pretty handy too when you want to generically throw these guys around and inspect them through Go&rsquo;s reflect package to see what type you&rsquo;re dealing with at runtime.</p>

<p>Here&rsquo;s the <a href="http://labix.org/mgo">driver</a> that I find works nicely with mongodb</p>

<p>More later&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gin and Martini: Go Have Fun With Web Services Frameworks!]]></title>
    <link href="http://rabarar.github.io/blog/2014/12/15/gin-and-martini-go-have-fun-with-web-services-frameworks/"/>
    <updated>2014-12-15T21:47:32-05:00</updated>
    <id>http://rabarar.github.io/blog/2014/12/15/gin-and-martini-go-have-fun-with-web-services-frameworks</id>
    <content type="html"><![CDATA[<p>Building web services with Go is pretty straight-forward. See the <a href="https://golang.org/doc/">godocs for http</a> to see how to write both client and server code.</p>

<p>With a little more help, we can go beyond the standard Go packages and use a package web framework that accelerates the development of a web service stack. These frameworks do a few basic things:</p>

<pre><code>1. Routing
2. Parameter Handling
3. JSON marshalling and unmarshalling
4. HTML templates and form processing
</code></pre>

<p>Below are two fo the frameworks that are VERY light weight and easy to use:</p>

<pre><code>1. Martini
2. Gin
</code></pre>

<p>Basically both of these frameworks are very similar with the biggest difference being that Martini supports <a href="http://blog.parse.com/2014/05/13/dependency-injection-with-go/">Dependency Injection</a>. Gin uses a Context for its parameters.</p>

<ol>
<li><a href="http://martini.codegangsta.io">Martini</a></li>
<li><a href="http://gin-gonic.github.io/gin"/>Gin<a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bloom Filter's in Golang]]></title>
    <link href="http://rabarar.github.io/blog/2014/12/03/bloom-filters-on-golang/"/>
    <updated>2014-12-03T14:34:20-05:00</updated>
    <id>http://rabarar.github.io/blog/2014/12/03/bloom-filters-on-golang</id>
    <content type="html"><![CDATA[<p>Implementing and Benchmarking Bloom Filters in Golang:</p>

<p>Here&rsquo;s a great <a href="http://zhen.org/blog/benchmarking-bloom-filters-and-hash-functions-in-go/">article</a> on impementing and benchmarking Bloom Filters in Golang.</p>

<p>Three separate types of filters are implements: Standard, Partitioned, and Scalable.</p>

<p>For a detailed <a href="http://www.dca.fee.unicamp.br/~chesteve/pubs/bloom-filter-ieee-survey-preprint.pdf">look</a> Read is paper.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Golang File Upload Processing]]></title>
    <link href="http://rabarar.github.io/blog/2014/12/01/golang-file-upload-processing/"/>
    <updated>2014-12-01T15:29:39-05:00</updated>
    <id>http://rabarar.github.io/blog/2014/12/01/golang-file-upload-processing</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a quick sample (credit: astaxie) that demonstrates how to upload a file in golang:</p>

<p>There are two things going on here: First is the handler section that processes the GET and then the section handling the POST (to be more accurate, we should check the r.Method once more to see if it&rsquo;s exactly the POST method).</p>

<p>In the get, we generate a token to ensure that the file we receive is indeed the one requested from the GET. Although in this code, there isn&rsquo;t a check to see that that&rsquo;s indeed the case in the POST (left as an exercise for the reader).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>   <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/upload&quot;</span><span class="p">,</span> <span class="nx">upload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// upload logic</span>
</span><span class='line'>  <span class="kd">func</span> <span class="nx">upload</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;method:&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Method</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Method</span> <span class="o">==</span> <span class="s">&quot;GET&quot;</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">crutime</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Unix</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">h</span> <span class="o">:=</span> <span class="nx">md5</span><span class="p">.</span><span class="nx">New</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">io</span><span class="p">.</span><span class="nx">WriteString</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nx">FormatInt</span><span class="p">(</span><span class="nx">crutime</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'>          <span class="nx">token</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;%x&quot;</span><span class="p">,</span> <span class="nx">h</span><span class="p">.</span><span class="nx">Sum</span><span class="p">(</span><span class="kc">nil</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">t</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">template</span><span class="p">.</span><span class="nx">ParseFiles</span><span class="p">(</span><span class="s">&quot;upload.gtpl&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">t</span><span class="p">.</span><span class="nx">Execute</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">token</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">r</span><span class="p">.</span><span class="nx">ParseMultipartForm</span><span class="p">(</span><span class="mi">32</span> <span class="o">&lt;&lt;</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">file</span><span class="p">,</span> <span class="nx">handler</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">FormFile</span><span class="p">(</span><span class="s">&quot;uploadfile&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>              <span class="k">return</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&quot;%v&quot;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">Header</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;value=%s\n&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">FormValue</span><span class="p">(</span><span class="s">&quot;token&quot;</span><span class="p">))</span>
</span><span class='line'>          <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">OpenFile</span><span class="p">(</span><span class="s">&quot;./test/&quot;</span><span class="o">+</span><span class="nx">handler</span><span class="p">.</span><span class="nx">Filename</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">O_WRONLY</span><span class="p">|</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_CREATE</span><span class="p">,</span> <span class="mo">0666</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>              <span class="k">return</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">io</span><span class="p">.</span><span class="nx">Copy</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">file</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the template above, upload.gtpl looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;</span>Upload file<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;form</span> <span class="na">enctype=</span><span class="s">&quot;multipart/form-data&quot;</span> <span class="na">action=</span><span class="s">&quot;http://127.0.0.1:9090/upload&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;file&quot;</span> <span class="na">name=</span><span class="s">&quot;uploadfile&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;token&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;upload&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[v2.1.0 of Go-Json-Rest Is Out! With Apache Style Logging]]></title>
    <link href="http://rabarar.github.io/blog/2014/12/01/v2-dot-1-0-of-go-json-rest-is-out-with-apache-style-logging/"/>
    <updated>2014-12-01T15:06:42-05:00</updated>
    <id>http://rabarar.github.io/blog/2014/12/01/v2-dot-1-0-of-go-json-rest-is-out-with-apache-style-logging</id>
    <content type="html"><![CDATA[<p>Another RESTful golang JSON package is available to quickly support the development of RESTful JSON-based server apps.</p>

<p><code>git clone https://github.com/ant0ine/go-json-rest.git</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uncertanty]]></title>
    <link href="http://rabarar.github.io/blog/2014/12/01/uncertanty/"/>
    <updated>2014-12-01T08:56:04-05:00</updated>
    <id>http://rabarar.github.io/blog/2014/12/01/uncertanty</id>
    <content type="html"><![CDATA[<p>Tripped over a post today inspired from the new movie coming out about Allan Turing, and it got me searching the web to read more about his thoughts on uncomputability. And then that led into an article talking about uncertainty, and incompleteness juxtaposed next to uncomputability. There&rsquo;s something Euler equation-like about these three elements being placed in one contemplation.</p>

<p>This is what I will think about today. Surely there is a deeper connection between all three of these mathematical philosophies that govern the physical world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rabarar's Attempt at Setting Up Octopress]]></title>
    <link href="http://rabarar.github.io/blog/2014/11/30/rabarars-attempt-at-setting-up-octopress/"/>
    <updated>2014-11-30T21:59:02-05:00</updated>
    <id>http://rabarar.github.io/blog/2014/11/30/rabarars-attempt-at-setting-up-octopress</id>
    <content type="html"><![CDATA[<p>First blog post!</p>

<p>A quick install and a setup of the Octopress Blog on github.io!
Stay tuned for Golang Rants :)</p>
]]></content>
  </entry>
  
</feed>
