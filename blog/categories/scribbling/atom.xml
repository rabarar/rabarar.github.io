<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scribbling | Rabarar\'s Blog]]></title>
  <link href="http://rabarar.github.io/blog/categories/scribbling/atom.xml" rel="self"/>
  <link href="http://rabarar.github.io/"/>
  <updated>2015-08-19T12:03:50-04:00</updated>
  <id>http://rabarar.github.io/</id>
  <author>
    <name><![CDATA[Rob Baruch]]></name>
    <email><![CDATA[rabarar@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Golang Scribbles]]></title>
    <link href="http://rabarar.github.io/blog/2015/07/07/golang-scribbles/"/>
    <updated>2015-07-07T11:05:41-04:00</updated>
    <id>http://rabarar.github.io/blog/2015/07/07/golang-scribbles</id>
    <content type="html"><![CDATA[<p>So I was <a href="http://bored.com"><strong>bored</strong></a> an thought I&rsquo;d write some go code to demonstrate a few interesting features in Go!</p>

<p>Take a look at</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span><span class="p">&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">fmt</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">sync</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">time</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">)&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>        <span class="nx">MAXFUNCS</span> <span class="p">=</span> <span class="mi">100</span>
</span><span class='line'><span class="p">)&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">pre</span><span class="p">&gt;&lt;</span><span class="nx">code</span><span class="p">&gt;</span>    <span class="kd">var</span> <span class="nx">x</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span><span class='line'>            <span class="nx">y</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span>
</span><span class='line'>            <span class="nx">z</span> <span class="kt">int</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">xx</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span><span class='line'>            <span class="nx">y</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span>
</span><span class='line'>            <span class="nx">z</span> <span class="kt">int</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">MAXFUNCS</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">x</span><span class="p">.</span><span class="nx">Lock</span><span class="p">()</span>
</span><span class='line'>                    <span class="nx">x</span><span class="p">.</span><span class="nx">y</span> <span class="p">=</span> <span class="nx">z</span>
</span><span class='line'>                    <span class="nx">x</span><span class="p">.</span><span class="nx">z</span> <span class="p">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">y</span><span class="p">(</span><span class="mi">42</span> <span class="o">*</span> <span class="nx">num</span><span class="p">)</span>
</span><span class='line'>                    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;x.z = %d\n&quot;</span><span class="p">,</span> <span class="nx">x</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span>
</span><span class='line'>                    <span class="nx">xx</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">-</span> <span class="nx">x</span>
</span><span class='line'>                    <span class="nx">x</span><span class="p">.</span><span class="nx">Unlock</span><span class="p">()</span>
</span><span class='line'>            <span class="p">}(</span><span class="nx">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">to</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nx">gets</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">select</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nx">num</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">-</span><span class="nx">xx</span><span class="p">:</span>
</span><span class='line'>                    <span class="nx">to</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>                    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;got %d\n&quot;</span><span class="p">,</span> <span class="nx">num</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span>
</span><span class='line'>                    <span class="nx">gets</span><span class="o">++</span>
</span><span class='line'>            <span class="k">default</span><span class="p">:</span>
</span><span class='line'>                    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;sleeping...\n&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>                    <span class="nx">to</span><span class="o">++</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="nx">to</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">5</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;received %d gets before timeout\n&quot;</span><span class="p">,</span> <span class="nx">gets</span><span class="p">)</span>
</span><span class='line'><span class="p">&lt;</span><span class="o">/</span><span class="nx">code</span><span class="p">&gt;&lt;</span><span class="o">/</span><span class="nx">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span><span class="kd">func</span> <span class="nx">z</span><span class="p">(</span><span class="nx">w</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">w</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'><span class="p">}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="nx">p</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here I want to highlight a few cool concepts in Go:</p>

<ul>
<li>Anonymous structures</li>
<li>Bi-directional Channels</li>
<li>Go Routines</li>
<li>Non-blocking Channels</li>
<li>Anonymous fields in structures</li>
<li>Closures</li>
</ul>


<p>This toy program defines a variable <em>x</em> that is an anonymous struct that has an anonymous field that is a <code>sync.Mutux</code>. Why make this field anonymous? Well, by doing so, we can <code>Lock()</code> and <code>Unlock()</code> the structure without needlessly specifying a fieldname. Simply <code>x.Lock()</code> will lock the Mutux.</p>

<p>Next we create a channel of type that&rsquo;s equivalent to the unnamed stucture type. We do this by mirroring the definition of the unnamed structure in the variable definition.</p>

<p>Now that we&rsquo;ve defined our variables, we create a bunch of go routines using a function closure. We define a function that takes an <code>int</code> as our closure. We then <code>Lock()</code> our variable, assign a function to memeber <code>x.y</code> and call the function passing in the integer and returning the result to <code>x.z</code>. Now that we&rsquo;ve assigned values to <code>x</code> we pass it down the channel <code>xx</code>. Lastly we <code>Unlock()</code> the Mutux.</p>

<p>At this point we&rsquo;ve fired up a bunch of go routines, and sent copies of our anonymous struct down the channel.</p>

<p>Next we start and infinite loop (yikes!) and check our channel for results in our main go-routine.</p>

<p>The first <code>case</code> in the <code>select</code> checks to see if we&rsquo;ve received a message on the channel. If we have we print out the value that we assigned to our integer field in our anonymous structure and tally the reeipt of a message on the channel.</p>

<p>If we don&rsquo;t receive a message, we default to our <code>default</code> case where we manage a timeout counter, <code>to</code>, After 5 consecutive seconds of not receiving any messages, we break our infinite loop, and report a timeout and display how many messages we received prior to timing out.</p>

<p>What might make this example more interesting is to delay each go routine by a random amount of time and see if our reception of messages completes prior to receiving all of the messages.</p>

<p>Try modifying the function z as follows and see what happens</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">z</span><span class="p">(</span><span class="nx">w</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">(</span><span class="nx">rand</span><span class="p">.</span><span class="nx">Intn</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">w</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This more realistically demonstrates how the Non-blocking channel works when reading mesages at an unpredictable rate.</p>
]]></content>
  </entry>
  
</feed>
