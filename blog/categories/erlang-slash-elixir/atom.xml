<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Erlang/elixir | Rabarar\'s Blog]]></title>
  <link href="http://rabarar.github.io/blog/categories/erlang-slash-elixir/atom.xml" rel="self"/>
  <link href="http://rabarar.github.io/"/>
  <updated>2017-03-22T17:07:46-04:00</updated>
  <id>http://rabarar.github.io/</id>
  <author>
    <name><![CDATA[Rob Baruch]]></name>
    <email><![CDATA[rabarar@yahoo.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Climbing Mt. Elixir/Erlang]]></title>
    <link href="http://rabarar.github.io/blog/2017/03/22/get-you-some-elixir/"/>
    <updated>2017-03-22T10:47:35-04:00</updated>
    <id>http://rabarar.github.io/blog/2017/03/22/get-you-some-elixir</id>
    <content type="html"><![CDATA[<p>Just for fun, I thought it would be exciting to learn something new. Not just a new language, but a new paradigm of programmning. I&rsquo;ve read a bit about Functional Programming over the years, and even dabbled in college with Lisp and Prolog, but I never took the deep dive&hellip; until now.</p>

<p>The urban legend is tall and long - Dude, one programmer on a raspberry pi hosted a billion users and the code ran for like a million years! Well, I think the hype might be exaggerated, but the truth is pretty awesome. There&rsquo;s so much going on in Erlang/Elixir that at first glance it can be overwhelming for someone coming to it with zero experience. And, making matters worse, coming to it with ZERO experience with functional programming is an even larger leap.</p>

<h2>Where to Begin</h2>

<p>So, I started the journey with basically zero experience with functional programming and no experience with Erlang/Elixir. And with a lot of reading, writing, and question asking - in roughly 12 weeks - I&rsquo;ve become very comfortable with Elixir, OTP, Metaprogramming, and even some Erlang. I thought I&rsquo;d write about how to navigate the seemingly daunting process of becoming proficient.</p>

<h3>Step 0.</h3>

<p>You need to first get a development environment setup. This encompasses the Erlang/Elixir environment and an editor of choice. There are essentially two choices:  building from source or a employing a package manager:</p>

<ul>
<li>From <a href="http://elixir-lang.org/install.html#compiling-from-source-unix-and-mingw" title="source install">Source</a></li>
<li>From <a href="http://elixir-lang.org/install.html#mac-os-x" title="OSX Elixir Install">Brew or Mac Ports (OS X)</a></li>
<li>From a Unix <a href="http://elixir-lang.org/install.html" title="package manager">Package Manager</a></li>
</ul>


<p>Regarding an editor, the best option here is to use your editor of choice, and then add the subsequent extensions to give you the fancy syntax highlighting and autocompletion to make your entry into Elixir that much easier. I use both Atom and Vi equipt with the above extension. For those using Sublime, you&rsquo;re in luck with the aftermarket add-ons also available to ease your editing.</p>

<h3>Step 1</h3>

<p>Okay, you successfully installed Erlang/Elixir, set up your editor -  now what?? Well, we have a few thing we need to do first. We need to step back and take a tour of the Elixir language and learn about the syntax, structures, and programming paradigms that broadly encompass the language. To do this, we need to understand how to interact with the Elixir environment and to experiment and understand what these things are and how they behave.</p>

<p>I&rsquo;d start with the <a href="http://elixir-lang.org/getting-started/introduction.html" title="Getting Started">official</a> website - specifically, the Getting Started section. Work through all 1-22 sections.</p>

<p>The first section is going to introduce you to the Elixir Interactive REPL - <strong>iex</strong>. This is an indispensible tool to play and experiment, and learn!! Along with <strong>iex</strong> there is <strong>elixir</strong> and <strong>elixirc</strong> a script interpreter and compiler respectivly. Finally, there are escripts which are binary files that execute from the command line. More on that later.</p>

<p>One cool thing about the REPL is that there is a <strong>TON</strong> of documentation built into the tool. Virtually all of the code is documented in <strong>iex</strong>. Start off by asking for help by running the help function.</p>

<pre><code class="elixir">$ iex
Erlang/OTP 19 [erts-8.3] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)
 ❄❄❄ Good Luck with Elixir ❄❄❄
I❤iex|1|▶▶▶ h()

                                  IEx.Helpers                                   

Welcome to Interactive Elixir. You are currently seeing the documentation for
the module IEx.Helpers which provides many helpers to make Elixir's shell more
joyful to work with.

This message was triggered by invoking the helper h(), usually referred to as
h/0 (since it expects 0 arguments).

You can use the h/1 function to invoke the documentation for any Elixir module
or function:

    iex&gt; h Enum
    iex&gt; h Enum.map
    iex&gt; h Enum.reverse/1

You can also use the i/1 function to introspect any value you have in the
shell:

    iex&gt; i "hello"

There are many other helpers available:

... and so on (read more)
</code></pre>

<p>There&rsquo;s a lot to learn in these first Twenty-Two sections:</p>

<p>Pay close attention to these major concepts:
- Pattern Matching
- Processes
- Recursion
- Enumerables and Streams
- Lists, Maps, and Tuples.</p>

<p>Focusing first on getting these basic Elixir concepts down will make learning the other more interesting topics far easier. Once you feel that you&rsquo;ve mastered these Introductory elements, take a look at the meat of Elixir:</p>

<ul>
<li>Mix</li>
<li>Applications</li>
<li>GenServer</li>
<li>Supervisors</li>
<li>Macros/Metaprogramming</li>
</ul>


<p>Now that you&rsquo;ve taken a broad cursery overview of the language by reviewing the website, familiarizing yourself with the tools, and experimenting with the language using the <strong>iex</strong> REPL, it&rsquo;s time to dive into a few books to add to our newly developed perspectives.</p>

<p>I found the following books <strong>very helpful</strong>:</p>

<ul>
<li><a href="https://www.manning.com/books/elixir-in-action" title="Elixir in Action">Elixir in Action</a></li>
<li><a href="https://www.manning.com/books/the-little-elixir-and-otp-guidebook" title="The Little Elixir and OTP Guidebook">The Little Elixir and OTP Guidebook</a></li>
<li><a href="https://pragprog.com/book/cmelixir/metaprogramming-elixir" title="Metaprogramming Elixir">Metaprogramming Elixir</a></li>
</ul>


<p>And in addition to the website and the books, I strongly recommend joining the <a href="https://elixir-slackin.herokuapp.com" title="elixir slack channel">elixir slack channel</a>. There are so many knowledgable and generous people on the Slack channel willing to help you understand concepts that may seem foreign or opaque to the noob. Ask away!</p>

<h3>Teaser</h3>

<p>So you&rsquo;ve learned the language, experimented with some of the features, maybe even learned how to use the GenServer, Supervisors, and did a little meta-programming. What&rsquo;s next??</p>

<p>Elixir is well suited for distributed computing. <strong>iex</strong> starts a Virtual Machine called the BEAM. Elixir makes it easy to connect multiple BEAMS together to solve a problem.</p>

<p>Here&rsquo;s a quick example of how easy it is to start two BEAMS and get them talking!!</p>

<p>First we need to name each BEAM and give it a shared secret that will be common among all of the participating nodes.</p>

<p>Then we&rsquo;ll need to connect the nodes and share our code.</p>

<p>Lastly, we&rsquo;ll need to run the code on all of the BEAMS. Wow, that sounds complicated. And indeed in many languages, contemplating such a task would be fraught with coding challenges and gotchas. Not so much in elixir.</p>

<p>Take a look:</p>

<p>First, let&rsquo;s start two separate <strong>iex</strong> BEAM VM&rsquo;s:</p>

<pre><code class="elixir">iex --name foo@hostname.local --cookie monster
</code></pre>

<p>and in another terminal window&hellip;</p>

<pre><code class="elixir">iex --name bar@hostname.local --cookie monster
</code></pre>

<p>Now we gave each instance its own name, and we set a cookie that allows each to connect to the other.</p>

<p>Next, we need to connect them. That is to say, make each node aware of the other. The simplest way to connect a node is to ping it!</p>

<p>On <strong>foo</strong> - let&rsquo;s ping <strong>bar</strong>.</p>

<pre><code class="elixir">Node.ping(:"bar@hostname.local")
:pong
</code></pre>

<p>If you didn&rsquo;t get a <strong>:pong</strong> back, you&rsquo;ve goofed. Confirm that you&rsquo;ve connected the nodes together by listing the Nodes.</p>

<pre><code class="elixir">Node.list
[:"bar@hostname.local"]
</code></pre>

<p>Now we can define a module on <strong>foo</strong> and send it to <strong>bar</strong>. In order for us to send the code to other nodes, we need to have our module compiled into a beam file. So, in your editor on a third terminal, define a basic module and save it to a file in the same directory that you ran the <strong>iex</strong> REPLs in:</p>

<p>Filename: boo.ex
<code>elixir
defmodule Boo do
  def hi do
    :hi
  end
end
</code></p>

<p>How do we compile this module definition into a beam file? We can use iex (<code>c/2</code> - see h c/2 for more info), or we can compile it using <strong>elixirc</strong>.</p>

<pre><code>$ elixirc boo.ex
</code></pre>

<p>This will generate a file named <code>Elixir.Boo.beam</code>. Now we can move this code throughout our connected Nodes using the <code>nl/1</code> function in <strong>iex</strong>.</p>

<pre><code class="elixir">nl(Boo)
{:ok, [{:"rob@mbp2016.local", :loaded, Boo}]}
</code></pre>

<p>This returns a tuple with :ok and a list of three-tuples. The code has now been successfully distributed to the other connected nodes - an we can run it! There are two ways to run the defined function in <code>Boo</code>. We can type into the <strong>iex</strong> on <strong>bar</strong> and run it <code>Boo.hi</code>. Or, we can run it from <code>foo@hostname.local</code>.</p>

<pre><code class="elixir">me = self()
Node.spawn_link :"bar@hostname.local", fn -&gt;
  send me, {:remote_val, Boo.hi}
end
</code></pre>

<p>and to retrieve the value sent from <strong>bar</strong> to <strong>foo</strong> we can use <strong>flush()</strong> thereby retrieving the message sent from <strong><em>bar</em></strong> to <strong><em>foo&rsquo;s</em></strong> process:</p>

<pre><code class="elixir">flush()
{:remote_val, :hi}
</code></pre>

<p>It&rsquo;s that easy! Of course this was a trivial example. But the point is to demonstrate how easily and quickly one can develop a distributed application. Instead of sending a message, we could have just as easily performed a complex computation - using the power of all of the CPUs in the Node list.</p>
]]></content>
  </entry>
  
</feed>
